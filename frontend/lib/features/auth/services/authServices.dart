import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:frontend/common/widgets/custom_snack_bar.dart';
import 'package:frontend/features/admin/models/user.dart';
import 'package:frontend/features/admin/widgets/side_navigation_bar.dart';
import 'package:frontend/features/auth/screens/signin_screen.dart';
import 'package:frontend/features/receptionist/Dashboard/screens/receptionist_main.dart';
import 'package:frontend/provider/user_Provider.dart';
import 'package:frontend/utils/constant/api.dart';
import 'package:http/http.dart' as http;
import 'package:provider/provider.dart';
import 'package:shared_preferences/shared_preferences.dart';

// AuthService handles authentication-related network operations
class AuthService {
  // SignUp function for registering a new user
  void signUpUser({
    required BuildContext context, // Flutter context for showing UI messages
    required String name,
    required String email,
    required String password,
    required String role, // User's role (admin, receptionist, user, etc.)
  }) async {
    try {
      // Create a new User object (client-side only)
      User user = User(
        id: '', // ID will be generated by the server
        name: name,
        password: password,
        email: email,
        address: '',
        role: role,
        token: '', // Will be received after authentication
      );

      // Send a POST request to the backend signup API
      http.Response res = await http.post(
        Uri.parse('$uri/api/signup'), // API endpoint
        body: user.toJson(),
        headers: <String, String>{
          'Content-Type':
              'application/json; charset=UTF-8', // Inform backend we're sending JSON
        },
      );
      print("Response: ${res.statusCode} - ${res.body}");

      if (res.statusCode == 200) {
        final responseData = jsonDecode(res.body);

        String userRole = responseData['role']; // role from backend
        Widget targetScreen;
        if (responseData == "Admin") {
          targetScreen = SideNavigationBar(); // Admin Dashboard
        } else if (userRole == "Receptionist") {
          targetScreen = ReceptionistDashboardScreen();
        } else {
          // If some unexpected role comes, show an error screen
          targetScreen = Scaffold(
            appBar: AppBar(title: Text('Error')),
            body: Center(
              child: Text(
                'Invalid role: $userRole',
                style: TextStyle(fontSize: 18),
              ),
            ),
          );
        }
        CustomSnackBar.show(
          context,
          message: "Account created successfully!",
          backgroundColor: Colors.green,
          icon: Icons.check_circle,
        );
        Navigator.pushAndRemoveUntil(
          context,
          MaterialPageRoute(builder: (context) => targetScreen),
          (route) => false,
        );
      } else {
        final error = jsonDecode(res.body);
        CustomSnackBar.show(
          context,
          message: '$error',
          backgroundColor: Colors.redAccent,
        );
      }
    } catch (e) {
      print('$e');
    }
  }
  // SignIn function for logging in user

  void signInUser({
    required BuildContext context,
    required email,
    required password,
    required role,
  }) async {
    try {
      http.Response res = await http.post(
        Uri.parse('$uri/api/signin'),
        body: jsonEncode({"email": email, "password": password, "role": role}),
        headers: {'Content-Type': 'application/json; charset=UTF-8'},
      );

      if (res.statusCode == 200) {
        final responseData = jsonDecode(res.body);

        print("Full Response: ${res.body}");
        print("Token: ${responseData['token']}");

        // Store token
        SharedPreferences sp = await SharedPreferences.getInstance();
        await sp.setString('x-auth-token', responseData['token']);

        // Merge token into user map
        final userMap = responseData['user'];
        userMap['token'] = responseData['token'];

        // Set user in provider
        Provider.of<UserProvider>(context, listen: false).setUser(res.body);

        // Show success
        CustomSnackBar.show(
          context,
          message: "Login successful!",
          backgroundColor: Colors.green,
        );

        // // Immediately fetch updated user data
        // getUserData(context: context);

        // Navigate based on role
        final String roleFromBackend = responseData['user']['role'];

        if (roleFromBackend.toLowerCase() == 'admin') {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const SideNavigationBar()),
          );
        } else if (roleFromBackend.toLowerCase() == 'receptionist') {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(
              builder: (context) => const ReceptionistDashboardScreen(),
            ),
          );
        } else {
          Navigator.pushReplacement(
            context,
            MaterialPageRoute(builder: (context) => const SignInScreen()),
          );
        }
      } else {
        final error = jsonDecode(res.body);
        CustomSnackBar.show(
          context,
          message: "Login Failed",
          backgroundColor: Colors.redAccent,
        );
      }
    } catch (e) {
      print(e);
    }
  }

  void getUserData({required BuildContext context}) async {
    try {
      SharedPreferences prefs = await SharedPreferences.getInstance();
      String? token = prefs.getString('x-auth-token');

      if (token == null || token.isEmpty) {
        print('No token found, skipping user fetch');
        return;
      }

      var tokenRes = await http.post(
        Uri.parse('$uri/tokenIsValid'),
        headers: {
          'Content-Type': 'application/json; charset=UTF-8',
          'x-auth-token': token,
        },
      );

      var response = jsonDecode(tokenRes.body);

      if (response == true) {
        // get the user data
        http.Response userRes = await http.get(
          Uri.parse('$uri/'),
          headers: {
            'Content-Type': 'application/json; charset=UTF-8',
            'x-auth-token': token,
          },
        );

        var userProvider = Provider.of<UserProvider>(context, listen: false);
        userProvider.setUser(userRes.body);
      }
    } catch (e) {
      CustomSnackBar.show(
        context,
        message: "$e",
        backgroundColor: Colors.redAccent,
      );
    }
  }
}
